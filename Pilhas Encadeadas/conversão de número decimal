#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define INT_MIN 50

typedef struct Cell Cell;
typedef struct PilhaE PilhaE;

struct Cell{
    int item; 
    Cell *next;
};

struct PilhaE{
    Cell *topo;
};

Cell* criar_celula(int key){
    Cell *c = (Cell*) malloc(sizeof(Cell));
    c->item = key;

    c->next = NULL;

    return c;
}

PilhaE* criar_pilhaE(){
    PilhaE* p = (PilhaE*) malloc(sizeof(PilhaE));

    p->topo = NULL;

    return p;
}

int pilhaE_vazia(PilhaE *p){
    return (p == NULL) || (p->topo == NULL);
}

void empilhar(int key, PilhaE *p){
    Cell *aux;

    if (p == NULL)
        p = criar_pilhaE();

    aux = criar_celula(key);

    aux->next = p->topo;

    p->topo = aux;
}

int desempilhar(PilhaE *p){
    Cell *aux; 
    int item = INT_MIN;

    if (!pilhaE_vazia(p)){

        aux = p->topo;

        item = aux->item;

        p->topo = aux->next;

        free(aux);
    }

    return item;
}

void imprimir_pilha(PilhaE *p){
    Cell *aux; 

    if (!pilhaE_vazia(p)){
        aux = p->topo;

        while (aux != NULL){
            printf("%d", aux->item);

            aux = aux->next;
        }
    }
}

int liberar_pilha(PilhaE *p){
    if (p != NULL){
        while (!pilhaE_vazia(p))
            desempilhar(p);

        free(p);

        return 1;
    }

    return 0;
}

int Dec (PilhaE *p, int base){
    int resto=0, x = 0;
    int c;
    int num = desempilhar(p);
   
    while((num > 0) && (resto = num))
    {
        
        resto = num%base;
        num = num/base;
        if(resto>=10){
            //conversao para letra da tabela ASCII
            resto = resto+87;
        }
            empilhar(resto, p);
    }
    return 0;
}

int main() {
PilhaE* p = criar_pilhaE();
   int n, b, val;
    
      scanf("%d", &n);
     scanf("%d", &b);
    empilhar(n, p);
    Dec(p, b);
    
    while(!pilhaE_vazia(p)){
        val = desempilhar(p);
        if(val>b){
            printf("%c", val);
        }
        else{
            printf("%d", val);
        }
    }
       
    return 0;
}
