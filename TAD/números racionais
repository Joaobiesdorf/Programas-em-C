#include <stdio.h>
#include <stdlib.h>

typedef struct{
    int num, den; 
}RAC;

int mdc(int a, int b){
    if(b == 0) return a;
    return mdc(b, a % b);
}

RAC *criar(int num, int den){
    RAC *r = (RAC*) malloc(sizeof(RAC));
    r->num = num;
    r->den = den;
    return r;
}

RAC *somar(RAC *r1, RAC *r2){
    int mmc = (r1->den * r2->den) / mdc(r1->den, r2->den);
    int num = (mmc / r1->den * r1->num) + (mmc / r2->den * r2->num);
    int den = mmc;
    return criar(num, den);
}

RAC *subtrair(RAC *r1, RAC *r2){
    int mmc = (r1->den * r2->den) / mdc(r1->den, r2->den);
    int num = (mmc / r1->den * r1->num) - (mmc / r2->den * r2->num);
    int den = mmc;
    return criar(num, den);
}

RAC *multiplicar(RAC *r1, RAC *r2){
    int num = r1->num * r2->num;
    int den = r1->den * r2->den;
    return criar(num, den);
}

RAC *dividir(RAC *r1, RAC *r2){
    int num = r1->num * r2->den;
    int den = r1->den * r2->num;
    return criar(num, den);
}

int main(){
    int num1, den1, num2, den2;
    scanf("%d", &num1);
    scanf("%d", &den1);
    scanf("%d", &num2);
    scanf("%d", &den2);

    RAC *r1 = criar(num1, den1);
    RAC *r2 = criar(num2, den2);
    printf("r1: %d/%d\n", r1->num, r1->den);
    printf("r2: %d/%d\n", r2->num, r2->den);
    RAC *soma = somar(r1, r2);
    printf("r1+r2=%d/%d\n", soma->num, soma->den);
    free(soma);
    RAC *sub = subtrair(r1, r2);
    printf("r1-r2=%d/%d\n", sub->num, sub->den);
    free(sub);
    RAC *multi = multiplicar(r1, r2);
    printf("r1*r2=%d/%d\n", multi->num, multi->den);
    free(multi);
    RAC *div = dividir(r1, r2);
    printf("r1/r2=%d/%d\n", div->num, div->den);
    free(div);

    free(r1);
    free(r2);
    
    return 0;
}
