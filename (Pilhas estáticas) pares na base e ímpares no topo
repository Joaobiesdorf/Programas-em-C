Implementada uma função que receba duas pilhas de números inteiros positivos. A função retorna uma terceira pilha resultante da concatenação das duas pilhas.
Os números ímpares estão próximos à base e os pares próximos do topo.

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define TAM_MAX 100

typedef struct {
    int item[TAM_MAX];
    int topo;
}Pilha;

Pilha* criar_pilha(){
    Pilha* p = (Pilha*) malloc(sizeof(Pilha));

    p->topo = -1;

    return p;
}

int pilha_cheia(Pilha *p){
 
    if (p == NULL)
        return -1;
    else if (p->topo == (TAM_MAX - 1))
        return 1;
    else
        return 0;
}

int pilha_vazia(Pilha *p){

    if (p == NULL)
        return -1;
    else if (p->topo == -1)
        return 1;
    else
        return 0;
}
int obterValordoTopo(Pilha *p){
    if(!pilha_vazia(p))
        return p->item[p->topo];
    else 
        return -1;
}

int empilhar(Pilha *p, int item){
    if (p == NULL)
        p = criar_pilha();

    if (!pilha_cheia(p)){
        p->topo++; 

        p->item[p->topo] = item; 

        return 1; 
    }

    return 0; 
}

int desempilhar (Pilha *p){
    int item = -1;

    if (!pilha_vazia(p)){
        item = p->item[p->topo];

        p->topo--;
    }

    return item;
}

    
Pilha* concatenarImparBase(Pilha *Val1, Pilha *Val2){
    
    Pilha *Val3 = NULL;
    Val3 = criar_pilha();
    Pilha *Val4 = NULL;
    Val4 = criar_pilha();
    Pilha *Val5 = NULL;
     Val5 = criar_pilha();
    
    int n;
    
    
   Val3 = criar_pilha();
    
   
     for(n = Val1->topo;n >= 0;n--){
        if(obterValordoTopo(Val1) % 2 == 0)
            empilhar(Val3,desempilhar(Val1));
        
         else if(obterValordoTopo(Val1) % 2 != 0)
            empilhar(Val4,desempilhar(Val1));
            
    }
    
for(n = Val2->topo;n >= 0;n--){
         
    if(obterValordoTopo(Val2) % 2 == 0){
            
            empilhar(Val3,desempilhar(Val2));
        }
        
         
         else if(obterValordoTopo(Val2) % 2 != 0){
             
            empilhar(Val4,desempilhar(Val2));
         }
            
    }
    
    for(n = Val4->topo;n >= 0;n--)
  {
        empilhar(Val5,desempilhar(Val4));
    }
    for(n= Val5->topo;n >= 0;n--)
  {
        empilhar(Val3,desempilhar(Val5));
    }
    
     for(n = Val3->topo;n >= 0;n--)
     {
        empilhar(Val4,desempilhar(Val3));
     }
    
    return Val4;
}
        

    
void imprimir_pilha(Pilha *p){
    Pilha aux = *p;
    int item;
    
    while (!pilha_vazia(&aux)){
        item = desempilhar(&aux);

        printf("%d ", item);
    }
}


    
int main() {
       int n1, n2;
    Pilha *Val1;
     Pilha *Val2;
     Pilha *Val3;
        
 
    
    Val1 = criar_pilha();
do{
        scanf("%d",&n1);
        
    if(n1 != -1)
            empilhar(Val1, n1); 
  }while(n1 != -1);
    
     Val2 = criar_pilha();
    
do{
    scanf("%d",&n2);
        
      if(n2 != -1)
        empilhar(Val2, n2); 
}while(n2 != -1);
    
    Val3 = concatenarImparBase(Val1, Val2);
    
    imprimir_pilha(Val3);

     
    return 0;
}
