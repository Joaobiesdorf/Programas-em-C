#include <stdio.h>
#include <stdlib.h>
#define TAM_MAX 1000 

typedef struct {
    char item[TAM_MAX];
    int topo;
}PilhaC;

PilhaC* criar_pilha(){
    PilhaC *p = (PilhaC*) malloc(sizeof(PilhaC));

    p->topo = -1;

    return p;
}


int pilha_cheia(PilhaC *p){



    if (p == NULL)
        return -1;
    else if (p->topo == (TAM_MAX - 1))
        return 1;
    else
        return 0;
}


int pilha_vazia(PilhaC *p){



    if (p == NULL)
        return -1;
    else if (p->topo == -1)
        return 1;
    else
        return 0;
}


int empilhar(PilhaC *p, char item){
   
    if (p == NULL)
        p = criar_pilha();


    if (!pilha_cheia(p)){
        p->topo++; // a pilha aumenta

        p->item[p->topo] = item; 

        return 1; 
    }

    return 0; 
}


char desempilhar (PilhaC *p){
    char item;

    if (!pilha_vazia(p)){
        item = p->item[p->topo];

        p->topo--;
    }

    return item;
}

void imprimir_pilha(PilhaC *p){

    PilhaC aux = *p;
    char item;

 
    while (!pilha_vazia(&aux)){
        item = desempilhar(&aux);

        printf("%d\n", item);
    }
}

// Liberar a pilha
void liberar_pilha(PilhaC *p){
    if (p != NULL)
        free(p);
}

char topo(PilhaC* p) {
    if (pilha_vazia(p)) {
        exit(1);
    }
    return p->item[p->topo];
}

int obter_posicao_topo(PilhaC *p){
    if (!pilha_vazia(p))
        return p->topo;
    else
        return -1;
}


int Cdiamantes(char* C) {
    PilhaC* p = criar_pilha();
    int diamantes = 0;
    for (int i = 0; C[i] != '\0'; i++) {
        if (C[i] == '<') {
            empilhar(p, '<');
        } else if (C[i] == '>') {
            if (!pilha_vazia(p) && topo(p) == '<') {
                desempilhar(p);
                diamantes++;
            }
        }
    }
    free(p);
    return diamantes;
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        char C[TAM_MAX];
        scanf("%s", C);
        printf("%d\n", Cdiamantes(C));
    }
    return 0;
}
