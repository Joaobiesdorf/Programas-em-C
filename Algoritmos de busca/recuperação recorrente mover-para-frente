#include<stdio.h>
#include<stdlib.h>
#include<math.h>
typedef struct Cell Cell;
struct Cell{
       int item;
       Cell*next;
};
typedef struct Lista{
       Cell*head;
}Lista;
Cell*criar_celula(int key)
{
    Cell*c=(Cell*)malloc(sizeof(Cell));
    c->item=key;
    c->next=NULL;

    return c;
}
Lista*criar_lista()
{
    Lista*l=(Lista*)malloc(sizeof(Lista));
    l->head=NULL;

    return l;
}
int lista_vazia(Lista*l)
{
    return(l==NULL)||(l->head==NULL);
}
void inserir_primeiro(Lista*l,int key)
{
     Cell*aux;
     if(l==NULL)
     {
        l=criar_lista(l);
     }
     aux=criar_celula(key);
     aux->next=l->head;
     l->head=aux;
}
void inserir_ultimo(Lista*l,int key)
{
     Cell*aux,*novo;
     if(l==NULL)
     {
        l=criar_lista(l);
     }
     novo=criar_celula(key);
     if(lista_vazia(l))
     {
         l->head = novo;
     }
     else{
         aux=l->head;
         while(aux->next!=NULL)
         {
            aux=aux->next;
         }
         aux->next=novo;
     }
}

void imprimirLista(Lista*l)
{
    Cell*aux;
    if(!lista_vazia(l))
    {
       aux=l->head;
       while(aux!=NULL)
       {
          printf("%d ",aux->item);
          aux=aux->next;
       }
       printf("\n");
    }
}

int Mover(Lista*l,int chave){
    
    Cell *a,*b;
    if(!lista_vazia(l)){
       if(l->head->item==chave) {
          return 1;
       }
           a=l->head;
            while(a!=NULL&&a->item!=chave){
               b = a;
               a = a->next;
            }
       if(a!=NULL) {
             b->next = a->next;
             a->next = l->head;
             l->head= a;
             return 1;
       }

    }
    return 0;

}

int main(){
    Lista*l = criar_lista();
    int n, r, q, i;
    do  {
        scanf("%d",&n);
      if(n!=-1){
      inserir_ultimo(l,n);
        }
    }while(n!=-1);
    
    scanf("%d",&q);
    
    for(i=0;i<q;i++){
       scanf("%d",&r);
       Mover(l,r);
    }
    imprimirLista(l);
}
