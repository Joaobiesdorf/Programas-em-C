Implementada uma função que recebe 3 listas estáticas (l1, l2, l3). A função concatena l1 e l2, de forma que ambas sejam invertidas, em l3. 
Durante a concatenação, as listas l1 e l2 são esvaziadas.

Exemplo:

Antes

l1 = {1, 2, 3}

l2 = {4, 5, 6, 7}

l3 = {}

Depois

l1 = {}

l2 = {}

l3 = {3, 2, 1, 7, 6, 5, 4}


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define MAX_SIZE 100

typedef struct{
    int item[MAX_SIZE];
    int qtd;
}Lista;


Lista* criar_lista(){
    Lista* l = (Lista*) malloc(sizeof(Lista));

    l->qtd = 0;

    return l;
}

int lista_vazia(Lista *l){
    return (l == NULL) || (l->qtd == 0);
}

int lista_cheia(Lista *l){
    return (l != NULL) && (l->qtd == MAX_SIZE);
}

int buscar(Lista *l, int chave){
    int i;

    if (!lista_vazia(l)){
        for (i = 0; i < l->qtd; i++)
            if (l->item[i] == chave)
                return i;
    }

    return -1;
}

int inserir(Lista *l, int chave){
     
    
    if (l == NULL)
        l = criar_lista();

    if (!lista_cheia(l)){
        l->item[l->qtd] = chave;
        l->qtd++; 
        return 1;
    }

    return 0;
}

int remover(Lista *l, int chave){
    int i, p = buscar(l, chave);

    if (p > -1){
        for (i = p; i < l->qtd - 1; i++)

            l->item[i] = l->item[i + 1];
        return 1;
    }
    return 0;
}
void remover_ultimo(Lista *l){
    
    if(l != NULL){
        l->qtd--;
    }
    
}
int inserir_ordenado(Lista *c, int chave){
    int n;

    
    if (c == NULL)
        c = criar_lista();

    if (!lista_cheia(c)){
       
        c->qtd++;

  
        for (n = c->qtd - 1; (n > 0) && (chave < c->item[n - 1]); n--)
            c->item[n] = c->item[n - 1];

        c->item[n] = chave;

           return  1;
    }
         return 0;
}
Lista* concatenarInv(Lista *c1, Lista *c2){
    Lista *c3 = NULL;
    int n, x;
    
    if (c1 == NULL)
         for (n = 0; n <  c2->qtd; n++){
            inserir(c3, c2->item[c1 ->qtd -n-1]);
            remover(c1, c3->item[n]);
         }
    else if (c2 == NULL)
         for (n = 0; n <  c1->qtd; n++){
            inserir(c3, c1->item[c1->qtd - n-1]);
            remover(c1, c3->item[n]);
         }
    else{
        c3 = criar_lista();
        x = c1->qtd;
        for (n = 0; n <  x; n++){
            inserir(c3, c1->item[c1->qtd-1]);
            remover_ultimo(c1);
        }
        
        x = c2->qtd;
        for (n = 0; n <  x; n++){
            inserir(c3, c2->item[c2->qtd-1]);
            remover_ultimo(c2);
        }
    }
           return c3;
}



int liberar_lista(Lista *l){
    if (l != NULL){
        free(l);

        return 1;
      }

          return 0;
}






void imprimir_lista(Lista *l){
    int i;

    if (!lista_vazia(l)){
        for (i = 0; i < l->qtd; i++)
            printf("%d ", l->item[i]);

        printf("\n");
    }
}



int main() {
    int n1, n2;
    Lista *c1;
    Lista *c2;
    Lista *c3;
  
    c1 = criar_lista();
    do{
        scanf("%d",&n1); 
        if(n1!=-1)
            inserir(c1,n1); 
        else{
        }
    }while(n1!=-1);
    
    c2 = criar_lista();
    
    do{
        scanf("%d",&n2);
    
        if(n2!= -1)
            inserir(c2,n2);
        else{
        }
    }while(n2 != -1);
    
    c3 = concatenarInv(c1,c2);
    imprimir_lista(c1);
    imprimir_lista(c2);
    imprimir_lista(c3);
    free(c1);
    free(c2);
    free(c3);
     
    return 0;
}
