#include <stdio.h>
#include <stdlib.h>




typedef struct GrafoMA {
   int V; 
   int A; 
   int **mat;
}GrafoMA;

static int** iniciar_MA(int n){
    int i, j;
    int **mat = (int**) malloc(n * sizeof(int*));

    for (i = 0; i < n; i++)
        mat[i] = (int*) calloc(n, sizeof(int));

    return mat;
}


static int valida_vertice(GrafoMA* G, int v){
    return (v >= 0) && (v < G->V);
}


GrafoMA* iniciar_grafoMA(int v){
    GrafoMA* G = (GrafoMA*) malloc(sizeof(GrafoMA));

    G->V = v;
    G->A = 0;
    G->mat = iniciar_MA(G->V);

    return G;
}


int aresta_existe(GrafoMA* G, int v1, int v2){
    return (G != NULL) && valida_vertice(G, v1) && valida_vertice(G, v2) && (G->mat[v1][v2] != 0);
}


void inserir_aresta(GrafoMA* G, int v1, int v2){
    if (!aresta_existe(G, v1, v2)){
        G->mat[v1][v2]  = 1;
        G->A++;
    }
}

void remover_aresta(GrafoMA* G, int v1, int v2){
    if (aresta_existe(G, v1, v2)){
        G->mat[v2][v1] = 0;
        G->A--;
    }
}

void imprimir_arestas(GrafoMA* G){
    int i, j;

    for (i = 1; i < G->V; i++)
        for (j = 0; j < i; j++)
            if (G->mat[i][j] == 1)
                printf("(%d, %d)\n", i, j);
}


void liberarGMA(GrafoMA* G){
    if (G != NULL){
        free(G->mat);
        free(G);
    }
}

static int soma_vetor(int *v, int n){
    int soma = 0;
    
    for (int i=0; i<n; i++)
        soma += v[i];
    
    return soma;
}

int k_regular(GrafoMA *G){
    int grau = 0, k_reg = 1;
    
    if(G != NULL){
        grau = soma_vetor(G->mat[0], G->V);
        
        for(int i = 1; (i< G->V) && k_reg; i++)
            if(grau != soma_vetor(G->mat[i], G->V))
                k_reg=0;
    }
    if(k_reg){
        printf("grafo k-regular com k=%d", grau);
        return grau;
    } else {
        printf("grafo nao k-regular");
        return 0;
    }
}


int main(){
    int n;
    GrafoMA *G;
    
    scanf("%d", &n);
    G = iniciar_grafoMA(n);
    
    for(int i=0; i<n; i++){
        int v2=0;
        
        while(v2 != -1){
            scanf("%d", &v2);
          
            if(v2!=-1)
         inserir_aresta(G, i, v2);
        
        }
    }
    k_regular(G);
    return 0;

}
