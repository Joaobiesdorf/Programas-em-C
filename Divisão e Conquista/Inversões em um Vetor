#include <stdio.h>
#include <stdlib.h>

long long mergeAndCount(int arr[], int left, int mid, int right) {
    int i = left, j = mid + 1, k = 0;
    long long inv_count = 0;
    int* temp = (int*)malloc((right - left + 1) * sizeof(int));

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i + 1);  // Todos os elementos restantes em i...mid são maiores
        }
    }

    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];

    free(temp);
    return inv_count;
}

long long countInversions(int arr[], int left, int right) {
    long long inv_count = 0;
    if (left < right) {
        int mid = (left + right) / 2;
        inv_count += countInversions(arr, left, mid);
        inv_count += countInversions(arr, mid + 1, right);
        inv_count += mergeAndCount(arr, left, mid, right);
    }
    return inv_count;
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);
    int arr[n];

    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    long long inversions = countInversions(arr, 0, n - 1);
    printf("Número de inversões: %lld\n", inversions);

    return 0;
}
